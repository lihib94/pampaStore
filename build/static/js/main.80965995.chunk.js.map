{"version":3,"sources":["store/cart-slice.js","App.js","store/cart-actions.js","store/index.js","index.js","store/ui-slice.js"],"names":["cartSlice","createSlice","name","initialState","items","totalQuantity","changed","totalAmount","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","price","quantity","totalPrice","push","title","removeItemFromCart","filter","cartActions","actions","Pampas","React","lazy","Candles","Garland","Urns","Home","Modal","Layout","NotFound","isInitial","App","dispatch","useDispatch","showCart","useSelector","ui","cartIsVisible","cart","useEffect","a","fetchData","fetch","response","ok","Error","json","data","cartData","console","log","sendRequest","method","body","JSON","stringify","sendCartData","fallback","open","onClose","uiActions","cartToFalse","path","element","replace","to","store","configureStore","reducer","uiSlice","ReactDOM","render","document","getElementById","toggle"],"mappings":"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","file":"static/js/main.80965995.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    changed: false,\r\n    totalAmount: 0,\r\n  },\r\n  reducers: {\r\n    replaceCart(state, action) {\r\n      state.totalQuantity = action.payload.totalQuantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      state.changed = true;\r\n      state.totalAmount = state.totalAmount + newItem.price;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n      \r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      if(+state.totalQuantity === 1){state.totalAmount = 0}\r\n      else{state.totalAmount = state.totalAmount - existingItem.price;}\r\n      state.totalQuantity--;\r\n      state.changed = true;\r\n      \r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;","import React, { Fragment, useEffect, Suspense } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Route, Navigate, Routes } from 'react-router-dom';\nimport { uiActions } from './store/ui-slice';\nimport { sendCartData, fetchCartData } from './store/cart-actions';\n\nconst Pampas = React.lazy(() => import('./pages/Pampas'));\nconst Candles = React.lazy(() => import('./pages/Candles'));\nconst Garland = React.lazy(() => import('./pages/Garland'));\nconst Urns = React.lazy(() => import('./pages/Urns'));\nconst Home = React.lazy(() => import('./pages/Home'));\nconst Modal = React.lazy(() => import('./components/UI/Modal.js'));\nconst Layout = React.lazy(() => import('./components/Layout/Layout'));\nconst NotFound = React.lazy(() => import('./pages/NotFound'));\n\nlet isInitial = true;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const showCart = useSelector((state) => state.ui.cartIsVisible);\n  const cart = useSelector((state) => state.cart);\n\n\n  useEffect(() => {\n    dispatch(fetchCartData());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n\n    if (cart.changed) {\n      dispatch(sendCartData(cart));\n    }\n  }, [cart, dispatch]);\n\n  return (\n    <Fragment>\n    <Suspense fallback={<p>Loading...</p>}>\n      <Layout>\n        {/* <Products /> */}\n      </Layout>\n      <Modal open={showCart} onClose={() => dispatch(uiActions.cartToFalse())} />\n        <Routes>\n          <Route path='/' element={<Navigate replace to=\"home\" />} />\n          <Route path='/home' element={<Home />} />\n          <Route path='/pampas' element={<Pampas />} />\n          <Route path='/Candles' element={<Candles />} />\n          <Route path='/Urns' element={<Urns />} />\n          <Route path='/Garland' element={<Garland />} />\n          <Route path='*' element={<NotFound />} />\n        </Routes>\n      </Suspense>\n    </Fragment>\n  );\n}\n\nexport default App;","import { uiActions } from './ui-slice';\r\nimport { cartActions } from './cart-slice';\r\n\r\nexport const fetchCartData = () => {\r\n  return async (dispatch) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        'https://react-http-a049b-default-rtdb.firebaseio.com/cart.json'\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Could not fetch cart data!');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    };\r\n\r\n    try {\r\n      const cartData = await fetchData();\r\n      dispatch(\r\n        cartActions.replaceCart({\r\n          items: cartData.items || [],\r\n          totalQuantity: cartData.totalQuantity,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.log(\"failed try and catch\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const sendCartData = (cart) => {\r\n  return async (dispatch) => {\r\n\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        'https://react-http-a049b-default-rtdb.firebaseio.com/cart.json',\r\n        {\r\n          method: 'PUT',\r\n          body: JSON.stringify({\r\n            items: cart.items,\r\n            totalQuantity: cart.totalQuantity,\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Sending cart data failed.');\r\n      }\r\n    };\r\n\r\n    try {\r\n      await sendRequest();\r\n\r\n    } catch (error) {\r\n   console.log(\"failed try and catch\");\r\n    }\r\n  };\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport uiSlice from './ui-slice';\r\nimport cartSlice from './cart-slice';\r\n\r\nconst store = configureStore({\r\n  reducer: { ui: uiSlice.reducer, cart: cartSlice.reducer },\r\n});\r\n\r\nexport default store;","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider \n            store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst uiSlice = createSlice({\r\n  name: 'ui',\r\n  initialState: { cartIsVisible: false },\r\n  reducers: {\r\n    toggle(state) {\r\n      state.cartIsVisible = !state.cartIsVisible;\r\n    },\r\n    cartToFalse(state) {\r\n      state.cartIsVisible = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const uiActions = uiSlice.actions;\r\n\r\nexport default uiSlice;"],"sourceRoot":""}